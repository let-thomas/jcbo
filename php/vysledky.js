/**
 * 
 */

( function( $ ) {

function pageIsSelectmenuDialog( page ) {
    var isDialog = false,
        id = page && page.attr( "id" );
    $( ".filterable-select" ).each( function() {
        if ( $( this ).attr( "id" ) + "-dialog" === id ) {
            isDialog = true;
            return false;
        }
    });
    return isDialog;
}
$.mobile.document
    // Upon creation of the select menu, we want to make use of the fact that the ID of the
    // listview it generates starts with the ID of the select menu itself, plus the suffix "-menu".
    // We retrieve the listview and insert a search input before it.
    .on( "selectmenucreate", ".filterable-select", function( event ) {
        var input,
            selectmenu = $( event.target ),
            list = $( "#" + selectmenu.attr( "id" ) + "-menu" ),
            form = list.jqmData( "filter-form" );
        // We store the generated form in a variable attached to the popup so we avoid creating a
        // second form/input field when the listview is destroyed/rebuilt during a refresh.
        if ( !form ) {
            input = $( "<input data-type='search'></input>" );
            form = $( "<form></form>" ).append( input );
            input.textinput();
            list
                .before( form )
                .jqmData( "filter-form", form ) ;
            form.jqmData( "listview", list );
        }
        // Instantiate a filterable widget on the newly created selectmenu widget and indicate that
        // the generated input form element is to be used for the filtering.
        selectmenu
            .filterable({
                input: input,
                children: "> option[value]"
            })
            // Rebuild the custom select menu's list items to reflect the results of the filtering
            // done on the select menu.
            .on( "filterablefilter", function() {
                selectmenu.selectmenu( "refresh" );
            });
    })
    // The custom select list may show up as either a popup or a dialog, depending on how much
    // vertical room there is on the screen. If it shows up as a dialog, then the form containing
    // the filter input field must be transferred to the dialog so that the user can continue to
    // use it for filtering list items.
    .on( "pagecontainerbeforeshow", function( event, data ) {
        var listview, form;
        // We only handle the appearance of a dialog generated by a filterable selectmenu
        if ( !pageIsSelectmenuDialog( data.toPage ) ) {
            return;
        }
        listview = data.toPage.find( "ul" );
        form = listview.jqmData( "filter-form" );
        // Attach a reference to the listview as a data item to the dialog, because during the
        // pagecontainerhide handler below the selectmenu widget will already have returned the
        // listview to the popup, so we won't be able to find it inside the dialog with a selector.
        data.toPage.jqmData( "listview", listview );
        // Place the form before the listview in the dialog.
        listview.before( form );
 
    })
    // After the dialog is closed, the form containing the filter input is returned to the popup.
    .on( "pagecontainerhide", function( event, data ) {
        var listview, form;
        // We only handle the disappearance of a dialog generated by a filterable selectmenu
        if ( !pageIsSelectmenuDialog( data.toPage ) ) {
            return;
        }
        // ty wole
        //listview = data.prevPage.jqmData( "listview" ),
        listview = data.nextPage.jqmData( "listview" );
        form = listview.jqmData( "filter-form" );
        // Put the form back in the popup. It goes ahead of the listview.
        listview.before( form );
    })
    .on("title-filter-menu", function(event, data) {
        console.log("jsem tu");
        })
    .on("show.postinit", function(event, data) {
        console.log("doc show.postinit "); //// + event + "; ui " + data);
        //var items = $("input[id^='searchField']");
        //each
    })
    .on("change", "#zavod-filter-menu", function(event, data) {
    	console.log("zavod-filter-menu "); //// + event + "; ui " + data);
    	var form = this.closest("form");
    	form.submit();
    })
    // tabsload $( ".selector" ).on( "tabsload", function( event, ui ) {} );
    .on("tabsload", "#tabs", function( event, ui ) {
    	console.log("tabsload "); 
    	//ui.panel.selector
    	//ui.panel.context.id
    	$(ui.panel.selector).trigger('create') ;
    	$(ui.panel.selector + " input[id^='searchField']").trigger('searchField.postinit') ; // update current
    	$("table#vysledky tr:even").css("background-color", "#F4F4F8");
    	$("table#vysledky tr:odd").css("background-color", "#EFF1F1");
    }  )
    
    .on("searchField.postinit", "input[id^='searchField']", function(event, data) {
        console.log("searchField.postinit " + event + "; ui " + data);
        
    //.on("pagecontainershow", function(e) {
    //+-*/.on("pagecontainercreate", function(e, ui) {
    //-.on("show.postinit", )	
    //+-*/	console.log("pagecontainercreate " + e + "; ui " + ui);
        
    	var this_id = this.id;
    	var ident = this_id.substring(11);  // strlen("searchField") = 11 
    	var $this_field = $("#"+this_id); 
        
    	/*if ($this_field !== null && $.isFunction($("#"+this.id).autocomplete))
    	if ($)
    	{
    		console.log("searchField: skipping " + this.id + "; id of " + ident);
    		return;
   		}*/
        
		//var autocompleteData = $.parseJSON('[{"value":"AL","label":"Alabama"},{"value":"AK","label":"Alaska"},{"value":"AS","label":"American Samoa"},{"value":"AZ","label":"Arizona"},{"value":"AR","label":"Arkansas"},{"value":"CA","label":"California"},{"value":"CO","label":"Colorado"},{"value":"CT","label":"Connecticut"},{"value":"DE","label":"Delaware"},{"value":"DC","label":"District of Columbia"},{"value":"FL","label":"Florida"},{"value":"GA","label":"Georgia"},{"value":"GU","label":"Guam"},{"value":"HI","label":"Hawaii"},{"value":"ID","label":"Idaho"},{"value":"IL","label":"Illinois"},{"value":"IN","label":"Indiana"},{"value":"IA","label":"Iowa"},{"value":"KS","label":"Kansas"},{"value":"KY","label":"Kentucky"},{"value":"LA","label":"Louisiana"},{"value":"ME","label":"Maine"},{"value":"MD","label":"Maryland"},{"value":"MA","label":"Massachusetts"},{"value":"MI","label":"Michigan"},{"value":"MN","label":"Minnesota"},{"value":"MS","label":"Mississippi"},{"value":"MO","label":"Missouri"},{"value":"MT","label":"Montana"},{"value":"NE","label":"Nebraska"},{"value":"NV","label":"Nevada"},{"value":"NH","label":"New Hampshire"},{"value":"NJ","label":"New Jersey"},{"value":"NM","label":"New Mexico"},{"value":"NY","label":"New York"},{"value":"NC","label":"North Carolina"},{"value":"ND","label":"North Dakota"},{"value":"NI","label":"Northern Marianas Islands"},{"value":"OH","label":"Ohio"},{"value":"OK","label":"Oklahoma"},{"value":"OR","label":"Oregon"},{"value":"PA","label":"Pennsylvania"},{"value":"PR","label":"Puerto Rico"},{"value":"RI","label":"Rhode Island"},{"value":"SC","label":"South Carolina"},{"value":"SD","label":"South Dakota"},{"value":"TN","label":"Tennessee"},{"value":"TX","label":"Texas"},{"value":"UT","label":"Utah"},{"value":"VT","label":"Vermont"},{"value":"VI","label":"Virgin Islands"},{"value":"VA","label":"Virginia"},{"value":"WA","label":"Washington"},{"value":"WV","label":"West Virginia"},{"value":"WI","label":"Wisconsin"},{"value":"WY","label":"Wyoming"}]');
    	var autocompleteData;
    	$.ajax({
    		  url: "judoka.php",
    		  dataType: 'json',
    		  async: false,
    		  data: "method=list&format=json&kid="+ident,
    		  success: function(data) {
    			  console.log( "judoka loaded" );
        		  autocompleteData = data;
    		  }
    		});
    	/*async $.getJSON( "judoka.php?method=list&format=json&kid="+ident, function( data ) {
    		  console.log( "judoka loaded" );
    		  autocompleteData = data;
    	});*/
    	
    		/*[
            { label: "jiri petr", value: "val1"},
            { label: "piri chmyri", value: "val2"},
            { label: "vlada made", value: "val13"},
            { label: "chlap toma", value: "val4"},
            { label: "tomas comas", value: "val5"},
        ];*/

		//-$("#searchField").autocomplete({
    	console.log("searchField: hanging to " + this.id + "; id of " + ident);
    	$this_field.autocomplete({
			target: $('#suggestions' + ident),
			source: autocompleteData,
			//-source: 'judoka.php?method=search&format=json&kid='+ident,
			matchFromStart: false,
			callback: function(e) {
				var $a = $(e.currentTarget);
				var kule = $a.data();
				console.log("callbacktest: id of " + ident);
				//var that = $a.data;
//				$('#searchField').val( $a.data('autocomplete').value );
//				$("#searchField").autocomplete('clear');
				$("#judoka"+ident).val($a.data('autocomplete').value );
				$this_field.val( $a.data('autocomplete').label );
				$this_field.autocomplete('clear');
			},
			link: 'zavodnik?name=',
			minLength: 1
		});
	})
//-    .on('pagecontainershow', function (e, ui) {
//        var activePage = $(':mobile-pagecontainer').pagecontainer('getActivePage');
//        if(activePage.attr('id') === 'login') {
//-            $(document)
            .on('click', '#submit', function(ev, handl) { // catch the form's submit event
                //if($('#username').val().length > 0 && $('#password').val().length > 0)
                { //ev.currentTarget
                	var form = this.closest("form");
                	var form_id = "#" + form.id; 
                	var div = form.closest("div");
                	//var div_id = "#" + div.id;
                	//var kategory = $(form_id).find('#kat').val();
                	//dtto var kategory = $(form_id).find('input[name="kat"]').val();
                	//var name = $(form_id).find('#name'+kategory+"-filter-menu").val();//-filter-menu
                    //userHandler.username = $('#username').val();
                 
                    // Send data to server through the Ajax call
                    // action is functionality we want to call and outputJSON is our data
                    $.ajax({url: 'vysledky-row.php',
                        data: {action : 'store', formData : $(form).serialize()},
                        type: 'post',                  
                        async: 'true',
                        dataType: 'html',
                        beforeSend: function() {
                            // This callback function will trigger before data is sent
                            $.mobile.loading('show'); // This will show Ajax spinner
                        },
                        complete: function() {
                            // This callback function will trigger on data sent/received complete   
                            $.mobile.loading('hide'); // This will hide Ajax spinner
                        },
                        success: function (result) {
                            // Check if authorization process was successful
                            //-if(result.status == 'success') {
                        	var current_index = $("#tabs").tabs("option","selected");
                            	$(div).html(result); 
                                $(div).trigger('create') ;
                                //userHandler.status = result.status;
                                //$.mobile.changePage("#second");                        
                            //-} else {
                            //-    alert('Logon unsuccessful!');
                            //-}
                        },
                        error: function (request,error) {
                            // This callback function will trigger on unsuccessful action               
                            alert('Network error has occurred please try again!');
                        }
                    });                  
                }
                //else {
                //    alert('Please fill all necessary fields');
                //}          
                return false; // cancel original event to prevent form submitting
//-            });  
//        } else if(activePage.attr('id') === 'second') {
//            activePage.find('.ui-content').text('Wellcome ' + userHandler.username);
//        }
    });
	$("#show").on("show.postinit", function(e, ui) { //show.postinit
        console.log("show.postinit " + e + "; ui " + ui);
    });
	
}

)( jQuery );
